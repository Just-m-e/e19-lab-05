name: Create and publish a Docker image

on:
  push:
    branches: ['main']  # Déclenche l'action sur la branche 'release'

env:
  REGISTRY: ghcr.io  # Le registre GitHub Container Registry
  IMAGE_NAME: ${{ github.repository }}  # Nom de l'image Docker, qui est 'Just-m-e/e19-lab-05'

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest  # Le job s'exécute sur la dernière version disponible d'Ubuntu

    permissions:
      contents: read  # Lire le contenu du repository
      packages: write  # Permission pour écrire dans le registre des packages (GHCR)
      attestations: write  # Permission pour écrire les attestations de provenance de l'artéfact
      id-token: write  # Permission pour écrire les jetons d'authentification

    steps:
      # Étape 1 : Checkout du code
      - name: Checkout repository
        uses: actions/checkout@v4  # Récupère le code source du repository

      # Étape 2 : Connexion au registre GitHub Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}  # Le registre (ghcr.io)
          username: ${{ github.actor }}  # Utilise le nom d'utilisateur GitHub de la personne qui a déclenché le workflow
          password: ${{ secrets.GITHUB_TOKEN }}  # Utilise le GITHUB_TOKEN pour l'authentification

      # Étape 3 : Extraction des métadonnées (tags et labels) pour Docker
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}  # Nom complet de l'image Docker (avec le registre)

      # Étape 4 : Construction et publication de l'image Docker
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v3
        with:
          context: .  # Le répertoire courant comme contexte de construction
          push: true  # Pousse l'image vers le registre si la construction réussit
          tags: ${{ steps.meta.outputs.tags }}  # Les tags de l'image, extraits dans l'étape précédente
          labels: ${{ steps.meta.outputs.labels }}  # Les labels de l'image, extraits dans l'étape précédente

      # Étape 5 : Génération d'une attestation d'artéfact (optionnel)
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}  # Nom complet de l'image Docker
          subject-digest: ${{ steps.push.outputs.digest }}  # Le digest de l'image
          push-to-registry: true  # Pousse l'attestation vers le registre
